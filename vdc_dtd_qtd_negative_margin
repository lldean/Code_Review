WITH
    dates AS (
        SELECT
            PARSE_DATE('%Y%m%d', '20230129') AS dt_begin,
            DATE_SUB(CURRENT_DATE("America/New_York"), INTERVAL 1 DAY) AS dt_end
    ),

    DTD AS (
        SELECT
            oh.webstore_key,
            oh.order_date,
            oh.web_cust_num,
            pds.product_id,
            os.order_sku_key,
            MIN(os.orig_tot_extended_amt - os.orig_tot_cost_amt) AS margin_DTD
        FROM dates, `entdata.ecm.order_sku_txn_fulfill` txnf
                    INNER JOIN `entdata.ecm.order_sku` os
                    ON os.order_sku_key = txnf.order_sku_key
                    INNER JOIN `entdata.ecm.order_header` oh
                    ON oh.order_header_key = txnf.order_header_key
                    INNER JOIN `entdata.prd.dks_sku` pds
                    ON os.product_id = pds.product_id
                    INNER JOIN `entdata.ecm.order_fulfill` oful
                    ON oful.order_fulfill_key = txnf.order_fulfill_key            
                    INNER JOIN  `entdata.ddw.date_dim` odd 
                    ON oh.order_date=odd.calendar_date    
        WHERE oh.order_date BETWEEN dates.dt_begin AND dates.dt_end
        AND oful.fulfill_channel = 'VDC'
        GROUP BY
            oh.webstore_key,
            oh.order_date,
            oh.web_cust_num,
            pds.product_id,
            os.order_sku_key
        HAVING margin_DTD < 0 
            )

SELECT qtd.webstore_key,
       qtd.order_date,
       qtd.product_id,
       COUNT(DISTINCT qtd.web_cust_num) AS order_count_DTD,
       margin_DTD
FROM DTD qtd  
GROUP BY qtd.webstore_key,
       qtd.order_date,
       qtd.product_id,
       qtd.margin_DTD
HAVING order_count_DTD > 1     
ORDER BY qtd.product_id  

---------------------
WITH
    dates AS (
        SELECT
            PARSE_DATE('%Y%m%d', '20230129') AS dt_begin,
            DATE_SUB(CURRENT_DATE("America/New_York"), INTERVAL 1 DAY) AS dt_end
    ),

    QTD AS (
        SELECT
            oh.webstore_key,
            oh.order_date,
            odd.fiscal_quarter_name_abb,
            oh.web_cust_num,
            pds.product_id,
            os.order_sku_key,
            MIN(os.orig_tot_extended_amt - os.orig_tot_cost_amt) AS margin
        FROM dates, `entdata.ecm.order_sku_txn_fulfill` txnf
                    INNER JOIN `entdata.ecm.order_sku` os
                    ON os.order_sku_key = txnf.order_sku_key
                    INNER JOIN `entdata.ecm.order_header` oh
                    ON oh.order_header_key = txnf.order_header_key
                    INNER JOIN `entdata.prd.dks_sku` pds
                    ON os.product_id = pds.product_id
                    INNER JOIN `entdata.ecm.order_fulfill` oful
                    ON oful.order_fulfill_key = txnf.order_fulfill_key            
                    INNER JOIN  `entdata.ddw.date_dim` odd 
                    ON oh.order_date=odd.calendar_date    
        WHERE oh.order_date BETWEEN dates.dt_begin AND dates.dt_end
        AND oful.fulfill_channel = 'VDC'
        GROUP BY
            oh.webstore_key,
            oh.order_date,
            odd.fiscal_quarter_name_abb,
            oh.web_cust_num,
            pds.product_id,
            os.order_sku_key
        HAVING margin < 0 
            )

SELECT *
FROM(
SELECT qtd.webstore_key,
       qtd.order_date,
       qtd.product_id,
       qtd.fiscal_quarter_name_abb,
       COUNT(DISTINCT qtd.web_cust_num) web_cust_num,
       margin
FROM QTD qtd
GROUP BY qtd.webstore_key,
       qtd.order_date,
       qtd.product_id,
       qtd.fiscal_quarter_name_abb,
       qtd.margin
)
     PIVOT (SUM(web_cust_num) AS order_count, MIN(margin) AS margin
            FOR fiscal_quarter_name_abb IN ('1QTR', '2QTR', '3QTR', '4QTR'))
         
ORDER BY  product_id
